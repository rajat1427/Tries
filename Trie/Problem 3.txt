/*https://leetcode.com/problems/implement-trie-prefix-tree/*/

package Leetcode;
import java.util.*;


public class Trie {

    class TrieNode{
         boolean endOfWord;
        Map<Character,TrieNode> children;
        public TrieNode() {
            children = new HashMap<>();
            endOfWord = false;
        }
    }
    
    TrieNode root;
    
    public Trie() {
        root = new TrieNode();
    }
    
    public void insert(String word) {
        TrieNode current = root;
        char[] chars = word.toCharArray();
        for(char ch:chars) {
            if(!current.children.containsKey(ch)) {
                TrieNode newNode = new TrieNode();
                current.children.put(ch,newNode);
            }
            current = current.children.get(ch);
        }
        current.endOfWord = true;
    }
    
    //whole search
    public boolean search(String word) {
        TrieNode current = root;
        char[] chars = word.toCharArray();
        for(char ch:chars) {
            if(!current.children.containsKey(ch)) {
                return false;
            }
            current = current.children.get(ch);
        }
        return current.endOfWord;
    }
    
    //partial search
    public boolean startsWith(String prefix) {
        TrieNode current = root;
        char[] chars = prefix.toCharArray();
        for(char ch:chars) {
            if(!current.children.containsKey(ch)) {
                return false;
            }
            current = current.children.get(ch);
        }
        return true;
    }
    
    public static void main(String[] args) {
        Trie trie = new Trie();
        trie.insert("apple");
        System.out.println(trie.search("apple"));   
        System.out.println(trie.search("app"));     
        System.out.println(trie.startsWith("app")); 
        trie.insert("app");   
        System.out.println(trie.search("app"));
    }

}
